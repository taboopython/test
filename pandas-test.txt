◯pandas 定義
import pandas as pd

◯csv読み込み
df = pd.read_csv('xxxxx.csv')

〇同ヘッダ縦結合　
df3 = df.append(def2)

◯統計量確認
df.describe()

◯欠損値確認
df.isnull().sum()

◯df概要確認
df.head()

◯データ結合(concat)
df = pd.concat([df_1, df_2], ignore_index=True)
appendとの違いは、concatはリスト型でDataFrameを渡すので、
２つ以上の複数のDataFrameをまとめて結合することができます。
https://ai-inter1.com/pandas-dataframe_union/

◯データ結合（append)　ユニオン
DataFrame1.append(DataFrame2, ignore_index=True/False)
引数ignore_indexでは、元のDataFrameのインデックスを破棄して
新たに振りなおす場合、Trueを指定し、元のインデックスを継承す
る場合はFalseを指定します。何も指定しないとFalseになります。
ignore_indexについては、元々のDataFrameのインデックスが連番で
振ってあるのであれば、新たに振りなおせるようTrueに設定する方
が良いです。
また元のDataFrameのインデックスがProduct IDなど、そのデータを
ユニークに特定する情報を持つ列に対して設定されているのであれば、
そのままのインデックスを使えるようFalseに設定すれば良いです。
https://ai-inter1.com/pandas-dataframe_union/

◯行数確認
print(len(df))

◯merge データ結合　ジョイン　
join_df = pd.merge(df1, df2[["x", "y", "z"]], on="x", how="left")
ジョインキー　を　x として、merge 引数に主軸のdf および、追加するdf2行項目のx,y,zを引数に、yzを主軸df1を左に配置しジョインする

◯必要なデータの作成
(例）合計列の作成
df["price"] = df["quantity"] * df["item_price"]

◯集計
print(df["price"].sum())
※できるなら検算しておく

◯ 期間範囲確認   期間があるものは確認すると良い
print(df["date(例)"].min())
print(df["date(例)"].max())

◯データ型確認
df.dtypes

◯object型からdatetime型に変更　（年月列作成）
df["date"] = pd.datetime(df["date"] )
df["month"] = df["date"] .dt.strftime("%Y%m")
df[["date","month"]].head()

◯月別集計
df.groupby("month").sum()["price(例)"]

◯まとめたい列が複数ある場合の項目別集計　
（例）月別、商品別集計
　df.groupby(["month","item"]).sum()[["price","quantity"]]

◯ピボットテーブル集計
pd.pivot_table(df, index='item', columns='month', values=['price', 'quantity'], aggfunc='sum')

○ピボットテーブルをdfに変換
df2 = pd.pivot_table(df, index='item', columns='month', values=['price', 'quantity'], aggfunc='sum')
df2.head()

◯総行数確認・属性タイプ・非null個数確認
df.info()

◯カテゴリ確認・カテゴリ別個数確認
df["header-koumoku"].value_counts()

◯ヒストグラムで可視化
%matplotlib inline
import matplotlib.pyplot as plt
df.hist(bins=50, figsize=(20,15))
plt.show()

◯font 表示設定
df.head().style.set_table_attributes('style="font-size: 17px"')

◯出力行設定
import pandas as pd
 #現在の最大表示行数の出力
pd.get_option("display.max_rows")
 #最大表示行数の指定（ここでは50行を指定）
pd.set_option('display.max_rows', 50)    #最初に定義しておくと良い
　　　　　　　
◯データフレームの保存
joblib.dump(df, './sample.pkl')
joblib.dumpという関数を利用して、データフレームをファイルとして保存できる。 上記の場合、.pyファイルを実行、もしくはjupyter-notebookを起動したカレントディレクトリにファイルが保存される。

◯データフレームの読み込み
df2 = joblib.load('./sample.pkl')

◯元df と保存df＝df2の検証
df == df2

◯エクセルの読み込み
　pd.reae_excel("///.xls")
      ※シリアル値のpythonとエクセルの違いに注意　
      　シリアル値の意味がわからない場合は要検索

◯小文字を大文字に変換
df.str.upper()

◯空欄の半角から全角変換
df.str.replace(" ","　")

　→特定行のみであれば
　　df["a"] = df["a"].df.str.replace(" ","　")　でOK

○特定値をキーにソート
df.sort_values(by=["a"], ascending=True)

○ユニークデータの検証
print(pd.unique(df["a"]))　　　　　内容確認
print(len(pd.unique(df["a"])))     数確認